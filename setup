#!/bin/bash
#
# Small script that fills in common env vars for all configs and 
# scripts (excluding dotfiles). These common env vars 
# are denoted by SUBST_VARS.

set -e
PROGRAM_NAME=$(basename "$0")
ENV_FILENAME=".env"
TEMP_FILENAME="temp"
# shellcheck disable=2016
SUBST_VARS=(
    '${JENKINS_MAIN_URL}'
)

if [ -z "$(find "$PWD" -maxdepth 1 -name "$ENV_FILENAME")" ]; then
	echo "${PROGRAM_NAME}: ${ENV_FILENAME} is not in the PWD!"
	exit 1
fi

if [ -z "$(which envsubst)" ]; then
	echo "${PROGRAM_NAME}: envsubst cannot be found on the PATH!"
	exit 1
fi

walkdirtree () {
    DIR="$1"
    # shellcheck disable=2181,2063
    # NOTE: I've seen bizarre occurances where
    # filenames have a '*' character appended to them
    # 
    # is the directory not empty?
    if [ "$(find "$DIR" | wc --lines)" -gt 1 ]; then
        for f in "$DIR"/*; do
            if [ -d "$f" ]; then
                walkdirtree "$f"
            elif grep --quiet \* <<< "$f"; then
                continue
            else 
                echo "$f"
            fi
        done
    fi
}

# shellcheck disable=1090
. "$ENV_FILENAME"

# NOTE: the intention is to concatenate the str
# to the array. This sort of thing is 'rarely intended' 
# according to shellcheck.
# shellcheck disable=2145
for f in $(walkdirtree "$PWD"); do
    # \..* for ignoring dotfiles
    case "$f" in
        "${PWD}/${PROGRAM_NAME}")	;;
		\..*)						;;
        *)							envsubst "'${SUBST_VARS[@]}'" < "$f" > "$TEMP_FILENAME"
									mv "$TEMP_FILENAME" "$f"
									;;
    esac
done

exit 0
